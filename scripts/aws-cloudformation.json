{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "",
  "Parameters": {
    "KeyName": {
      "Description": "EC2 Instance SSH Key",
      "Type": "AWS::EC2::KeyPair::KeyName"
    },
    "InstanceType": {
      "Description": "EC2 instance configuration",
      "Type": "String",
      "Default": "t2.micro"
    },
    "VPC": {
      "Description": "ID of the VPC",
      "Type": "String"
    },
    "RDSSubnets": {
      "Description": "Subnets for RDS in different regions",
      "Type": "CommaDelimitedList"
    }, 
    "PublicSubnet": {
      "Description": "Public subnet for EC2 instance",
      "Type": "String"
    },
    "DbUser": {
      "Description": "User for RDS",
      "Type": "String",
      "NoEcho": true
    },
    "DbPassword": {
      "Description": "Password for RDS",
      "Type": "String",
      "NoEcho": true
    }
  },
  "Mappings": {
    "AMIs": {
      "us-west-2": {
        "Name": "ami-0d1000aff9a9bad89"
      }
    }
  },
  "Resources": {
    "Server": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "InstanceType": {
          "Ref": "InstanceType"
        },
        "ImageId": {
          "Fn::FindInMap": [
            "AMIs",
            {
              "Ref": "AWS::Region"
            },
            "Name"
          ]
        },
        "KeyName": {
          "Ref": "KeyName"
        },
        "SecurityGroupIds": [
          {
            "Ref": "ServerSecurityGroup"
          }
        ],
        "SubnetId": {
          "Ref": "PublicSubnet"
        },
        "UserData": { "Fn::Base64": { "Fn::Join": ["", [
          "#!/bin/bash -xe\n",
          "yum install -y aws-cfn-bootstrap\n",
          "/opt/aws/bin/cfn-init -v ",
          "         --stack ", { "Ref": "AWS::StackName" },
          "         --resource Server",
          "         --configsets configure_docker",
          "         --region ", { "Ref": "AWS::Region" }, "\n"
        ]]}}
      },
      "Metadata": {
        "AWS::CloudFormation::Init": {
          "configSets": {
            "configure_docker": ["configure_docker"]
          },
          "configure_docker": {
            "files": {
              "/tmp/docker-setup.sh": {
                "content": { "Fn::Join": ["", [
                  "#!/bin/bash\n",
                  "usermod -aG docker ec2-user\n",
                  "dockerd"
                ]]},
                "mode": "000755",
                "owner": "root",
                "group": "root"
              }
            },
            "commands": {
              "add_docker_group": {
                "command": "sh /tmp/docker-setup.sh"
              }
            },
            "packages": {
              "yum": {
                "docker": [],
                "mysql": []
              }
            }
          }
        }
      }
    },
    "ServerDB": {
      "Type": "AWS::RDS::DBInstance",
      "Properties": {
        "DBSubnetGroupName": {
          "Ref": "DBSubnetGroup"
        },
        "VPCSecurityGroups": [
          { "Fn::GetAtt": ["ServerSecurityGroup", "GroupId"]}
        ],
        "Engine": "MySQL",
        "DBInstanceClass": "db.t2.micro",
        "AllocatedStorage": 5,
        "MasterUsername": {"Ref": "DbUser"},
        "MasterUserPassword": {"Ref": "DbPassword"},
        "PubliclyAccessible": true
      }
    },
    "ServerSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "VpcId": {"Ref": "VPC"},
        "GroupDescription": "Allows for SSH and HTTP access from any host",
        "SecurityGroupIngress": [
          {
            "FromPort": "22",
            "ToPort": "22",
            "IpProtocol": "tcp",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "FromPort": "80",
            "ToPort": "80",
            "IpProtocol": "tcp",
            "CidrIp": "0.0.0.0/0"
          }
        ]
      } 
    },
    "DatabaseSecurityGroup": {
      "Type": "AWS::RDS::DBSecurityGroup",
      "Properties": {
        "EC2VpcId": { "Ref": "VPC" },
        "GroupDescription": "Allows for SSH and HTTP access from any host"
      }
    },
    "DBSubnetGroup": {
      "Type": "AWS::RDS::DBSubnetGroup",
      "Properties": {
        "DBSubnetGroupDescription": "Subnets for the RDS DB Instance",
        "SubnetIds": { "Ref": "RDSSubnets"}
      }
    }
  }
}